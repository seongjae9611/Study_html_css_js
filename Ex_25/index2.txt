Js
const myPromise = new Promise((resolve, reject) => {
  setTimeout(() =>{
    reject(new Error());
  }, 1000)
});

myPromise.then(result => {
  console.log(result);
})
.catch(e =>{
  console.error(e);
})



Js
function increaseAndPrint(n){
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const value = n + 1;
      if(value === 5) {
        const error = new Error();
        error.name = "ValueIsFiveError";
        reject(error);
        return;
      }
      console.log(value);
      resolve(value);
    }, 1000);
  });
}

increaseAndPrint(0).then(increaseAndPrint)
.then(increaseAndPrint)
.then(increaseAndPrint)
.then(increaseAndPrint)
.then(increaseAndPrint)
.then(increaseAndPrint)
.catch( e => {
  console.error(e);
})


Js
function sleep(ms){
  return new Promise (resolve => setTimeout(resolve , ms));
}

const getDog = async () => {
  await sleep(1000);
  return "멍멍이";
}

const getRabbit = async() =>{
  await sleep(500);
  return "토끼";
}

const getTurtle = async() =>{
  await sleep(3000);
  return "거북이";
}

async function process(){
  const [dog, rabbit, turtle] = await Promise.all([getDog(), getRabbit(), getTurtle()]);
  console.log(dog);
  console.log(rabbit);
  console.log(turtle);
}
process()

Js
